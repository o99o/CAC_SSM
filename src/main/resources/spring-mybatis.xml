<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	 http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
	 http://www.springframework.org/schema/context 
	 http://www.springframework.org/schema/context/spring-context-4.3.xsd 
	 http://www.springframework.org/schema/mvc 
	 http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
	 http://www.springframework.org/schema/aop 
	 http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	 http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	 http://cxf.apache.org/jaxws 
	 http://cxf.apache.org/schemas/jaxws.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.zit">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
	<!-- 配置数据库连接 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}${dbName}${encoding}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<!-- 解决长时间不连接，连接失败问题 -->
		<property name="testOnBorrow" value="${testOnBorrow}"></property>
		<property name="testOnReturn" value="${testOnReturn}"></property>
		<property name="testWhileIdle" value="${testWhileIdle}"></property>
		<property name="validationQuery" value="${validationQuery}"></property>

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout"
			value="${removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />

		<!-- 监控数据库 -->
		<property name="proxyFilters">
			<list>
				<ref bean="statfilter" />
				<ref bean="logFilter" />
			</list>
		</property>
		<property name="filters" value="${filters}" />
	</bean>
	<!-- 慢SQL记录 *start* -->
	<bean id="statfilter"
		class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 开启合并sql -->
		<property name="mergeSql" value="true" />
		<!-- 开启慢查询语句,1秒 -->
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<!-- 慢SQL记录 *end* -->

	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4j2Filter">        
		<!-- 所有连接相关的日志 -->
		<property name="connectionLogEnabled" value="false"/>   
		<!-- 所有Statement相关的日志 -->
		<property name="statementLogEnabled" value="false"/>
		<!-- 是否显示结果集 -->
		<property name="resultSetLogEnabled" value="true"/> 
		<!-- 是否显示SQL语句 -->
		<property name="statementExecutableSqlLogEnable" value="true"/>
	</bean>

	<!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut"
		class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.zit.cac.service.*</value>
			</list>
		</property>
	</bean>

	<aop:config>
		<aop:pointcut id="cacpc"
			expression="execution(public * com.zit.cac.service.*.*(..))" />
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
		<aop:advisor pointcut-ref="cacpc" advice-ref="cacTxAdvice" />
	</aop:config>

	<tx:advice id="cacTxAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="datagrid*" propagation="REQUIRED" />

			<tx:method name="query*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="truncate*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="menu*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="exist*" propagation="SUPPORTS"
				read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:com/zit/**/mapping/*.xml"></property>
		<!-- mybatis配置文件 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
	</bean>


	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zit.cac.dao,com.zit.lpark.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- ********************************定义AOP切面******************************** -->
	<aop:aspectj-autoproxy />
	<!-- 自动装载aop -->
	<bean id="logAspect" class="com.zit.cac.aop.LogAspect" /><!-- 切面定义（采用注解的方式定义及使用） -->

	<!-- 引入jedis配置文件 -->
	<import resource="spring-redis.xml"/>
	<!-- 引入kafka配置 -->
	<import resource="classpath:kafkaProducer.xml" />
	<import resource="classpath:kafkaConsumer.xml" />
</beans>